Intro to JOINs - exercise 1

If you currently have the ‘departments_dup’ table set up, use DROP COLUMN to remove the ‘dept_manager’ column from the ‘departments_dup’ table.
Then, use CHANGE COLUMN to change the ‘dept_no’ and ‘dept_name’ columns to NULL.
(If you don’t currently have the ‘departments_dup’ table set up, create it. Let it contain two columns: dept_no and dept_name. Let the data type of dept_no be CHAR of 4, and the data type of dept_name be VARCHAR of 40. Both columns are allowed to have null values. Finally, insert the information contained in ‘departments’ into ‘departments_dup’.)
Then, insert a record whose department name is “Public Relations”.
Delete the record(s) related to department number two.
Insert two new records in the “departments_dup” table. Let their values in the “dept_no” column be “d010” and “d011”.

SOLUTION:

--------------------------
LEFT JOIN part2 notes:

SELECT 
  d.dept_no, m.emp_no, d.dept_name
FROM 
  departments_dub d
    LEFT JOIN
   dept_manager_dup m ON m.dept_no = d.dept_no
 ORDER BY d.dept_no;
 
 --------------------------------
 
 LEFT JOIN - Part II - exercise
Join the 'employees' and the 'dept_manager' tables to return a subset of all the employees whose last name is Markovitch.
See if the output contains a manager with that name.  
Hint: Create an output containing information corresponding to the following fields: 
‘emp_no’, ‘first_name’, ‘last_name’, ‘dept_no’, ‘from_date’. Order by 'dept_no' descending, and then by 'emp_no'.

This is similiar to the above lecture. And it similiar to LeetCode SQL problem 170s:

SOLUTION:
SELECT emp_no, dm.first_name, dm.last_name, dept_no, e.from_date
FROM employees e
LEFT JOIN
dept_manager dm ON emp_no=dm_id
WHERE dm.last_name='Markovitch'
ORDER BY dept_no DESC;

------------------------------------------
The new and the old join syntax - solution

Using "WHERE" can be seen as old school and slower in comparision to join:

SELECT  e.emp_no,  e.first_name, e.last_name, dm.dept_no, e.hire_date
FROM  employees e, dept_manager dm
WHERE  e.emp_no = dm.emp_no;

New method using join:
SELECT  e.emp_no,  e.first_name, e.last_name, dm.dept_no, e.hire_date
FROM  employees e
JOIN department_manager dm 
ON e.emp_no = dm.dept_no;
 
 ----------------------------------------
 Using JOIN and WHERE together:
 SELECT e.emp_no, e.first_name, e.last_name, s.salary
 FROM 
 employees E
 JOIN 
 salaries s ON e.emp_no = s.emp_no
 WHERE
 s.salary > 145000;
 
 
 Select the first and last name, the hire date,
 and the job title of all employees whose first name is “Margareta” and have the last name “Markovitch”.
 
 SELECT e.first_name, e.last_name, e.hire_date, t.job_title
 FROM employees e
 INNER JOIN
 titles
 ON e.emp_id=t.emp_id
 WHERE e.first_name='Margareta' AND e.last_name='Markovitch';
 
 ------------------------------------------
 CROSS JOIN:
 
 A CROSS JOIN will take the values from a certain table and connect them with all the values 
 from the tables we want to join it with.
 
 An INNER JOIN typically connects only the matching values.
 A CROSS JOIN connnects all the values, not just those that match.
 The Cartesian product of the values or two or more sets.
 Particularly useful when the tables in a database are not well connected.
 
  ------------------------------------------
  
  


