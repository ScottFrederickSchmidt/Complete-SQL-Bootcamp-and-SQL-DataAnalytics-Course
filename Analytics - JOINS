Intro to JOINs - exercise 1

If you currently have the ‘departments_dup’ table set up, 
use DROP COLUMN to remove the ‘dept_manager’ column from the ‘departments_dup’ table.
Then, use CHANGE COLUMN to change the ‘dept_no’ and ‘dept_name’ columns to NULL.
(If you don’t currently have the ‘departments_dup’ table set up, create it.

Let it contain two columns: dept_no and dept_name.
Let the data type of dept_no be CHAR of 4, and the data type of dept_name be VARCHAR of 40. Both columns are allowed to have null values.
Finally, insert the information contained in ‘departments’ into ‘departments_dup’.)
Then, insert a record whose department name is “Public Relations”.
Delete the record(s) related to department number two.
Insert two new records in the “departments_dup” table.
Let their values in the “dept_no” column be “d010” and “d011”.

SOLUTION:

--------------------------
LEFT JOIN part2 notes:

SELECT 
  d.dept_no, m.emp_no, d.dept_name
FROM 
  departments_dub d
    LEFT JOIN
   dept_manager_dup m ON m.dept_no = d.dept_no
 ORDER BY d.dept_no;
 
 --------------------------------
 
 LEFT JOIN - Part II - exercise
Join the 'employees' and the 'dept_manager' tables to return a subset of all the employees whose last name is Markovitch.
See if the output contains a manager with that name.  
Hint: Create an output containing information corresponding to the following fields: 
‘emp_no’, ‘first_name’, ‘last_name’, ‘dept_no’, ‘from_date’. Order by 'dept_no' descending, and then by 'emp_no'.

This is similiar to the above lecture. And it similiar to LeetCode SQL problem 170s:

SOLUTION:
SELECT emp_no, dm.first_name, dm.last_name, dept_no, e.from_date
FROM employees e
LEFT JOIN
dept_manager dm ON emp_no=dm_id
WHERE dm.last_name='Markovitch'
ORDER BY dept_no DESC;

------------------------------------------
The new and the old join syntax - solution

Using "WHERE" can be seen as old school and slower in comparision to join:

SELECT  e.emp_no,  e.first_name, e.last_name, dm.dept_no, e.hire_date
FROM  employees e, dept_manager dm
WHERE  e.emp_no = dm.emp_no;

New method using join:
SELECT  e.emp_no,  e.first_name, e.last_name, dm.dept_no, e.hire_date
FROM  employees e
JOIN department_manager dm 
ON e.emp_no = dm.dept_no;
 
 ----------------------------------------
 Using JOIN and WHERE together:
 SELECT e.emp_no, e.first_name, e.last_name, s.salary
 FROM 
 employees E
 JOIN 
 salaries s ON e.emp_no = s.emp_no
 WHERE
 s.salary > 145000;
 
 
 Select the first and last name, the hire date,
 and the job title of all employees whose first name is “Margareta” and have the last name “Markovitch”.
 
 SELECT e.first_name, e.last_name, e.hire_date, t.job_title
 FROM employees e
 INNER JOIN
 titles
 ON e.emp_id=t.emp_id
 WHERE e.first_name='Margareta' AND e.last_name='Markovitch';
----------------------------------
 CROSS JOIN:
 
 A CROSS JOIN will take the values from a certain table and connect them with all the values 
 from the tables we want to join it with.
 
 An INNER JOIN typically connects only the matching values.
 A CROSS JOIN connnects all the values, not just those that match.
 The Cartesian product of the values or two or more sets.
 Particularly useful when the tables in a database are not well connected.
 
 Lecture Notes Code:
 SELECT dm.*, d.*
 FROM departments d
 CROSS JOIN dept_manager dm
 WHERE d.dept_no <> dm.dept_no
 ORDER BY dm.emp_no , d.dept_no;
 
 SELECT e.*, d.*
 FROM departments d
 CROSS JOIN dept_manager dm
 JOIN employees e on dm.emp_no=e.emp_no;
 
----------------------------------
  CROSS JOIN - exercise 1
Use a CROSS JOIN to return a list with all possible combinations between managers 
from the dept_manager table and department number 9.
  
  SOLUTION:
  SELECT dm.*, d.*
  FROM departments d
  CROSS JOIN dept_ dm
  WHERE d.dept_no ='d009'
  ORDER BY d.dept_no;
  
----------------------------------
  CROSS JOIN - exercise 2
Return a list with the first 10 employees with all the departments they can be assigned to.
Hint: Don’t use LIMIT; use a WHERE clause.

SOLUTION: 

  
----------------------------------
#Using Aggregate functions with JOINS:
SELECT e.gender, AVG(s.salary) AS average_salary
FROM employees e
JOIN salaries s 
ON e.emp_no=s.emp_no
GROUP BY gender;


----------------------------------
JOIN MORE THAN TWO TABLES IN SQL:
SELECT e.first_name, e.last_name, e.hire_date, m.from_date, d.dept_name
FROM departments d 
JOIN dept_manager = ON d.dept_no = m.emp_no 
RIGHT JOIN employees e ON m.dept_no  = e.emp_no;
----------------------------------
Join more than two tables in SQL - exercise
Select all managers’ first and last name, hire date, job title, start date, and department name:


----------------------------------
TIPS AND TRICKS FOR JOINS:
Look for key columns that are common between tables (not always foreign/primary keys).

SELECT d.dept_name, AVG(salary) as average_salary
FROM departments d
JOIN dept_manager = ON d.dept_no = m.dept_no
JOIN salaries s on m.emp_no = s.emp_no
GROUP BY d.dept_name
HAVING average_salary > 60000
ORDER BY average_salary DESC;

----------------------------------
Tips and tricks for joins - exercise
How many male and how many female managers do we have in the ‘employees’ database?

SOLUTION:
----------------------------------
UNION VS. UNION ALL:
Used to combine a few SELECT statements into a single output.
Must SELECT the same number of columns from each table.
These columns should have the same name, same order, same data types.

SELECT n columns
FROM table1
UNION ALL SELECT n columns
FROM table2;

SELECT e.emp_no, e.first_name, e.last_name, NULL as dept_no, NULL as from_date
FROM employees_dup e
WHERE e.emp_no e = 30001
UNION ALL SELECT
NULL as emp_np, NULL as first_name, NULL as last_name, m.dept_no, m.from_date
FROM dept_manager m;

When uniting two identical organized tables:
*Union displays onlyu distinct values in the output
    -Uses more computational power
*UNION all retrieves the duplicates as well

UNION has better results while UNION ALL optimizes performance.
----------------------------------
UNION vs UNION ALL - exercise
Go forward to the solution and execute the query.
What do you think is the meaning of the minus sign before subset A in the last row (ORDER BY -a.emp_no DESC)? 

SOLUTION:

----------------------------------


----------------------------------

